<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>myfirst</title>
    <url>/2019/10/22/myfirst/</url>
    <content><![CDATA[<p>#awd </p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>hellopage</title>
    <url>/2019/10/22/hellopage/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JDBC注意事项</title>
    <url>/2019/10/22/JDBC%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>##JDBC<br>下载对应的数据库的jar<br>如mysql数据库 地址：D:\BaiduNetdiskDownload2\08.JDBC(共30集)\源码笔记\code&amp;资料\mysql-connector-java-5.1.7<br>提取里面的 <strong>mysql-connector-java-5.1.7-bin.jar</strong>文件即可  </p>
<blockquote>
<p>#对于jar的放置  </p>
</blockquote>
<ol>
<li>在项目根目录下创建一个lib文件夹把jar放进去  </li>
<li>右键jar文件丢出Path（build Path）  </li>
</ol>
<p>##jdbc文档<br>地址：所下驱动的docs文件夹下<br>刚开始比较难看懂，但要多看，养成习惯  </p>
<p>##流程  </p>
<ol>
<li>注册驱动 DriverManager(在版本升级之后就不用写了自动帮你注册)如果有多个jar的时候，为安全以防万一，还是写一下；  </li>
<li>通过getConnection函数建立连接 协议数据库 用户 密码 </li>
<li>创建Statement对象通过连接对象create出来</li>
<li>通过Statement对象的executeQuery函数执行命令，得的结果集（类型 ResultSet）  </li>
<li>逆向释放资源 close    </li>
</ol>
<p>##释放资源<br>  一般写在try catch 后面的finally里面。这样的话这些要释放资源的对象就需要在try外面申明一下。<br>  除此之外，释放资源的时候也要<strong>判断对象是否为空</strong>。<br>  我们可以建立一个<strong>JDBC的工具类</strong>，把他们的封装成一个函数release分别释放各个对象资源    </p>
<p>##JDBC优化  </p>
<blockquote>
<p>如注册驱动为防止注册两次，Class.forName（加载类的地址）；<br> 里面含静态代码块。还有就是为了<strong>抓异常</strong>我们就把catch的参数改为Exception。    </p>
</blockquote>
<p>###properties配置文件<br>  意义：未来配置的时候，方便改写；如密码数据库等<br>  位置：在src目录下直接建立一个properties文件；<strong>因为</strong>到时候可以通过<strong>类加载器找到文件</strong>；在sec下的文件会被放到该目录下的bin目录下，而类加载器会加载这个bin目录的所以文件。   </p>
<p>####使用步骤方法<br>  写在你所写工具类里的<strong>静态代码块</strong>里面，随你的工具类的加载而加载  </p>
<ol>
<li>创建properties对象  </li>
<li>找到配置文件然后把它转化成流（InputStream）<br>JDBCUtill.class.getClassLoader().getResourceAsStream(“jdbc.properties”);<br>当前类.class.加载器.转化成流(文件名)；<br><strong>properties文件也可以放在工程目录下面</strong>，通过new FileInputStream(文件名)获得流;</li>
</ol>
<p>##DAO模式<br>###概念<br> 在src目录下创建几个包，test包，dao包（写一些抽象类），dao.impl包(实现dao里的方法)<br> 每个一一对应如dao包下的<strong>UserDao</strong>对应dao.impl包里面的<strong>UserDaoImpl</strong>等<br>  一般实现impl里的方法我们可以以夫类（抽象）对象应用子类（实现类），然后引用他的方法</p>
<h2 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h2><blockquote>
<p>该对象就是替换前面的statement对象。  </p>
</blockquote>
<p>格式：ps = conn.prepareStatement(sql);<br>先传sql语句，可以进行检查语句语法是否错误的功能。<br>传的sql语句还是带有问号“？”的，可以用setString/int（ index，value）进行传参，<strong>注意索引第一个是1</strong>。</p>
<p>##小技巧  </p>
<ul>
<li>如果返回的东西有异常时，可以把它赋值给别人然后去抓异常然后return  </li>
<li>打印异常：e.printStackTrace();    </li>
<li>一个方法尽量就做一个具体的事    </li>
<li><strong>在一段字符串中插入变量</strong>，如user,字符串：“我的user是XX”可以用单引中加双引在加两个加号变量放中间；“我的‘“+user+”’是XX”；</li>
</ul>
<p>##@test<br>一般你不能@test的功能的，需要右键目录点击Build Path中的add lib<br>然后选择JUnit 选择JUnit 4就可以了；    </p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>web注意事项</title>
    <url>/2019/10/05/web%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>##驱动  </p>
<ul>
<li>把mysql的驱动包放在web工程下的WEB-INF下的lib目录下即可。  </li>
</ul>
<p>##resquset  </p>
<ul>
<li>request.getParameter(“id”);<br>获得请求过来的数据，如果是网页的话，在跳转的同时想带一些数据，比如在跳转的超连接里”inedx.html?id=12”。  </li>
</ul>
<p>##cookie  </p>
<ul>
<li>每个web工程最多20个cookie，服务器最多300个。cookie最大4kb。还并且有安全隐患。  </li>
</ul>
<p>##Session(会话)  </p>
<ul>
<li>基于Cookied的一种会话机制，不同于cookie，是存放在服务器上的  </li>
<li></li>
</ul>
]]></content>
  </entry>
</search>
